---
title: "**Nextflow Development - Metadata for complex datasets**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

::: callout-tip
### Objectives{.unlisted}
- Gain an understanding of how to use nf-core modules in a workflow script
- Manipulate and proprogate sample metadata throughout the workflow
- Create a custom nf-core module
:::

## **6.2 Complex datasets**

Consider the dataset below:

```default
HBR_Rep1_read1.fastq.gz
HBR_Rep1_read2.fastq.gz
HBR_Rep2_read1.fastq.gz
HBR_Rep2_read2.fastq.gz
UHR_Rep1_read1.fastq.gz
UHR_Rep1_read2.fastq.gz
UHR_Rep2_read1.fastq.gz
UHR_Rep2_read2.fastq.gz
```

There are two samples, `HBR` and `UHR`, each with two replicates. How can we adjust our samplesheet and pipeline to handle this dataset?

### **6.2.1 Samplesheet metadata**

The first step is to add an additional column to the samplesheet. For this dataset, we will add `replicate`. 

::: {.callout-important}
**TO DO**
Change path 
:::

```default
sample,replicate,fastq_1,fastq_2
ERC,1,/.../HBR_Rep1_read1.fastq.gz,/.../HBR_Rep1_read2.fastq.gz
ERC,2,/.../HBR_Rep2_read1.fastq.gz,/.../HBR_Rep2_read2.fastq.gz
UHR,1,/.../UHR_Rep1_read1.fastq.gz,/.../UHR_Rep1_read2.fastq.gz
UHR,2,/.../UHR_Rep2_read1.fastq.gz,/.../UHR_Rep2_read2.fastq.gz
```

Since this new column was added, the `assets/schema_input.json` will also need to be changed, specifying a new `"replicate"` property. Currently, there is no `nf-core` tool that can help add a new property to the schema -- this has to be done manually. Add the following as a "property" to `assets/schema_input.json`:

```default
            "replicate": {
                "type": "integer",
                "errorMessage": "Replicate number must be provided",
                "meta": ["rep"]
            }
```

Here, the important specification is `"meta"`, which will result in parsed samplesheet channel to have an additional metadata value `rep`, which corresponds to the replicate specified in the samplesheet. 

Now, let's run the pipeline with the new samplesheet, and `view()` the `ch_samplesheet` that has been created:

::: {.callout-warning collapse="true"}

Inside the `PIPELINE_INITIALISATION` workflow, you will need to change the samplesheet parsing to the following:

`nf-core-customrnaseq/subworkflows/local/utils_nfcore_customrnaseq_pipeline/main.nf`:
```default

    //
    // Create channel from input file provided through params.input
    //

    Channel
        .fromList(samplesheetToList(params.input, "${projectDir}/assets/schema_input.json"))
        .map {
            meta, fastq_1, fastq_2 ->
                if (!fastq_2) {
                    return [ meta + [ single_end:true ], [ fastq_1 ] ]
                } else {
                    return [ meta + [ single_end:false ], [ fastq_1, fastq_2 ] ]
                }
        }
        // .groupTuple()
        // .map { samplesheet ->
        //     validateInputSamplesheet(samplesheet)
        // }
        // .map {
        //     meta, fastqs ->
        //         return [ meta, fastqs.flatten() ]
        // }
        .set { ch_samplesheet }
```

Here, the `.groupTuple()` and downstream functions have been commented out. Within the first `map { }` funcion, the first element of the array has also been removed.

When the full command is used, this can cause unexpected behaviour, especially when creating new metadata values. 
:::


```default
nextflow run ./nf-core-customrnaseq/main.nf -resume -profile apptainer --input ./samplesheet_replicates.csv --outdir output -params-file ./params.yaml 
```

As expected, the new metadata value `rep` has been added in `ch_samplesheet`:

```default
[[id:ERC, rep:1, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz]]
[[id:ERC, rep:2, single_end:false], [/.../HBR_Rep2_read1.fastq.gz, /.../HBR_Rep2_read2.fastq.gz]]
[[id:UHR, rep:1, single_end:false], [/.../UHR_Rep1_read1.fastq.gz, /.../UHR_Rep1_read2.fastq.gz]]
[[id:UHR, rep:2, single_end:false], [/.../UHR_Rep2_read1.fastq.gz, /.../UHR_Rep2_read2.fastq.gz]]
```

### **6.2.2 Grouping metadata**

Now, what if we wish to concatenate the replicate FASTQ files that belong to one sample together? This can be done using the `map { }` function. 

Let's first consider one element channel:

```default
[[id:ERC, rep:1, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz]]
```

This element is a tuple, where the first list contains the metadata specified in the input samplesheet, and the second list contain the FASTQ files. 

The `map { }` function can be used to access different values in the tuple. 

```default
ch_samplesheet
    .map { meta, fqs ->
        meta.id = "CHANGED_NAME"
        [meta, fqs]
    }
    .view()
```

First, the local variables `meta` and `fqs` are declared within the map function. Variables declared before the `->` are always local variables that reference the input channel. The fist local variable `meta` can then be used to access the first element in the `ch_input` tuple (the metadata list). Similarly, the second local variable `fqs` can be used to access te second element in the `ch_input` tuple (the FASTQ list). 

In the second line of the map function, the `id` value inside `meta` has been changed from `ERC` to `"CHANGED_SAMPLE"`. 

In the last line of the map function, the updated metadata and unchanged FASTQs are returned. The last line of the map function will be the output. 

These steps are repeated for each element in `ch_samplesheet`, resulting in the following output:

```default
[[id:CHANGED_SAMPLE, rep:1, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz]]
[[id:CHANGED_SAMPLE, rep:2, single_end:false], [/.../HBR_Rep2_read1.fastq.gz, /.../HBR_Rep2_read2.fastq.gz]]
[[id:CHANGED_SAMPLE, rep:1, single_end:false], [/.../UHR_Rep1_read1.fastq.gz, /.../UHR_Rep1_read2.fastq.gz]]
[[id:CHANGED_SAMPLE, rep:2, single_end:false], [/.../UHR_Rep2_read1.fastq.gz, /.../UHR_Rep2_read2.fastq.gz]]
```

The `map { }` function can also be used to remove metadata values. To remove `rep` from the metadata:

```default
ch_samplesheet
    .map { meta, fqs ->
        meta = meta - meta.subMap('rep') 
        [meta, fqs]
    }
    .view()
```
Here, `subMap` is used to remove `rep` from the original metadata. In the last line of the `map { }` function, the updated metadata is returned 

**Exercise**: What do you think the new outputs would look like? Add the `map { }` function to your workflow script to confirm.

::: {.callout-note collapse="true"}
## Solution

`rep` is removed from the metadata, resulting in only `id` and `single_end` keys. 

```default
[[id:ERC, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz]]
[[id:ERC, single_end:false], [/.../HBR_Rep2_read1.fastq.gz, /.../HBR_Rep2_read2.fastq.gz]]
[[id:UHR, single_end:false], [/.../UHR_Rep1_read1.fastq.gz, /.../UHR_Rep1_read2.fastq.gz]]
[[id:UHR, single_end:false], [/.../UHR_Rep2_read1.fastq.gz, /.../UHR_Rep2_read2.fastq.gz]]
```

In the above output, we can see that we now have two samples that have the same metadata, but **different** FASTQ input files. 

::: 


To group together all FASTQ files containing the same file metadata, `groupTuple()` can be used.

**Exercise**: Add `groupTuple()` after your `map { }` function and view the results. Does the output match what you expect?

::: {.callout-note collapse="true"}
## Solution

Adding `groupTuple()` after the `map { }` function and viewing the result:

```default
    ch_samplesheet
        .map { meta, fqs ->
            meta = meta - meta.subMap('rep') 
            [meta, fqs]
        }
        .groupTuple()
        .view()
```

The following can be seen:

```default
[[id:ERC, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz], [/.../HBR_Rep2_read1.fastq.gz, /.../HBR_Rep2_read2.fastq.gz]]
[[id:UHR, single_end:false], [/.../UHR_Rep1_read1.fastq.gz, /.../UHR_Rep1_read2.fastq.gz], [/.../UHR_Rep2_read1.fastq.gz, /.../UHR_Rep2_read2.fastq.gz]]
```
:::

In the output, notice that while all FASTQ files that contain the same metadata are grouped together, they are still nested as `[ [s1r1, s1r2], [s2r1, s2r2] ]`.

**Exercise**: Using the [nf-core operator documentation](https://www.nextflow.io/docs/latest/reference/operator.html), can you find a suitable operator that will un-nest the FASTQ files such that the output structure is `[ s1r1, s1r2, s2r1, s2r2 ]`? Can you use it in combination with a **new** `map { }` function to un-nest just the FASTQ files (and not the metadata list)? Test it out by adding it after the `groupTuple()` operator and view the result. 

::: {.callout-note collapse="true"}
## Hint

The following `map` function structure can be used

```default
    ch_samplesheet
        .map { meta, fqs ->
            meta = meta - meta.subMap('rep') 
            [meta, fqs]
        }
        .groupTuple()
        .map { meta, fqs -> 
            <OPERATOR_COMMAND_HERE>
            [meta, fqs]
        }
        .view()
```
::: 


::: {.callout-note collapse="true"}
## Solution

The [flatten operator](https://www.nextflow.io/docs/latest/reference/operator.html#flatten) can be used to achieve this. 

```default
    ch_samplesheet
        .map { meta, fqs ->
            meta = meta - meta.subMap('rep') 
            [meta, fqs]
        }
        .groupTuple()
        .map { meta, fqs -> 
            fqs = fqs.flatten()
            [meta, fqs]
        }
        .view()
```

The FASTQ files have now been flattened:

```default
[[id:ERC, single_end:false], [/.../HBR_Rep1_read1.fastq.gz, /.../HBR_Rep1_read2.fastq.gz, /.../HBR_Rep2_read1.fastq.gz, /.../HBR_Rep2_read2.fastq.gz]]
[[id:UHR, single_end:false], [/.../UHR_Rep1_read1.fastq.gz, /.../UHR_Rep1_read2.fastq.gz, /.../UHR_Rep2_read1.fastq.gz, /.../UHR_Rep2_read2.fastq.gz]]
```
:::
