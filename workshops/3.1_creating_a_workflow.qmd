---
title: "**Nextflow Development - Creating a Nextflow workflow**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---

## **Creating an RNAseq Workflow**

::: callout-tip

### Objectives{.unlisted}

- Develop a basic Nextflow workflow 
- Read data of different types into a Nextflow workflow
- Output Nextflow process results to a predefined directory

:::

### **4.1.1. Define Workflow Input Parameters**

Let's create a Nextflow script `rnaseq.nf` for a RNA-seq workflow. The code begins with a shebang, which declares Nextflow as the interpreter. 

```default
#!/usr/bin/env nextflow
```

::: {.callout-important}
**TO DO**
Change PATH TO DATA
:::


We will use the following data:
```default
ls PATH TO DATA
```

```default
gut_1.fq  gut_2.fq  liver_1.fq  liver_2.fq  lung_1.fq  lung_2.fq  transcriptome.fa
```

This dataset contains three paired FASTQ samples, `gut`, `liver`, and `lung`, along with a transcriptome file `transcriptome.fa`

One way to define these to Nextflow is inside the workflow a Nextflow script. Copy the following into `rnaseq.nf`:

::: {.callout-important}
**TO DO**
Change PATH TO DATA
:::

```default
params.reads = "/.../<PATH TO DATA>/*_{1,2}.fq"
params.transcriptome_file = "/.../<PATH TO DATA>/transcriptome.fa"
params.multiqc = "/.../<PATH TO DATA>/training/nf-training/multiqc"
```

Workflow parameters can be defined and accessed inside the Nextflow script by prepending the prefix `params` to a variable name, separated by a dot character, eg. `params.reads`.

In the example above, the `reads` parameter is defined as multiple `.fq` files, using the `*` wildcard and `{ }` -- this notation will search for all files with `.fq` file extension, preceeded by either `_1` or `_2`. The `transcriptome_file` parameter is defined as one file, `/.../<PATH TO DATA>/transcriptome.fa`. The `multiqc` parameter is defined as a directory, `/.../<PATH TO DATA>/multiqc`. 

### **4.1.2. Create a transcriptome index file**

In Nextflow, commands or scripts can be executed inside a `process`.

```default
process INDEX {
    input:
    path transcriptome

    output:
    path "salmon_idx"

    script:
    """
    salmon index -t $transcriptome -i salmon_idx
    """
}
```
This `INDEX` process takes one input, and assigns it as the variable `transcriptome`. The `path` type qualifier will allow Nextflow to stage the files in the process execution directory, where they can be accessed by the script via the defined variable name, `transcriptome`. The code between the three double-quotes of the `script` block will be executed, which accesses the input `transcriptome` variable using `$`. The output is a path, with a filename `salmon_idx`. 

Note that the name of the input file is not used and is only referenced to by the input variable name. This feature allows pipeline tasks to be self-contained and decoupled from the execution environment. As best practice, avoid referencing files that are not defined in the process script. 

To execute the `INDEX` process, a `workflow` scope will need to be added. This scope outlines  what processes are executed. 

```default
workflow {
  index_ch = INDEX(params.transcriptome_file)
}
```

Here, the `params.transcriptome_file` parameter we defined earlier in the Nextflow script is used as an input into the `INDEX` process. The output of the process is assigned to the `index_ch` channel.

Run the Nextflow script:
```default
nextflow run rnaseq.nf
```
```default
ERROR ~ Error executing process > 'INDEX'

Caused by:
  Process `INDEX` terminated with an error exit status (127)

Command executed:

  salmon index -t transcriptome.fa -i salmon_index

Command exit status:
  127

Command output:
  (empty)

Command error:
  .command.sh: line 2: salmon: command not found

Work dir:
  /.../work/85/495a21afcaaf5f94780aff6b2a964c

Tip: you can try to figure out what's wrong by changing to the process work dir and showing the script file named `.command.sh`

 -- Check '.nextflow.log' file for details
```
When a process execution exits with a non-zero exit status, the workflow will be stopped. Nextflow will output the cause of the error, the command that caused the error, the exit status, the standard output (if available), the comand standard error, and the work directory where the process was executed. 

Let's first look inside the process execution directory:

```default
ls -a /.../work/85/495a21afcaaf5f94780aff6b2a964c 
```

```default
.   .command.begin  .command.log  .command.run  .exitcode
..  .command.err    .command.out  .command.sh   transcriptome.fa
```

We can see that the input file `transcriptome.fa` has been staged inside this process execution directory by being symbolically linked. This allows it to be accessed by the script. 

Inside the `.command.err` script, we can see that the `salmon` command was not found, resulting in the termination of the Nextflow workflow. 


::: {.callout-important}
**TO DO**
Change CONTAINER and CACHE DIRECTORY
:::

Containers can be used to execute the process within an environment that contains the package of interest. Create a config file `nextflow.config` containing the following:

```default
<CONTAINER> {
  enabled = true
  autoMounts = true
  cacheDir = "<CACHE DIRECTORY>"
}
```

The `container` process directive can be used to specify the required container:

```default
process INDEX {
    container "<CACHE DIRECTORY>/depot.galaxyproject.org-singularity-salmon-1.10.1--h7e5ed60_0.img"

    input:
    path transcriptome

    output:
    path "salmon_idx"

    script:
    """
    salmon index --threads $task.cpus -t $transcriptome -i salmon_idx
    """
}
```

Run the Nextflow script:
```default
nextflow run rnaseq.nf
```

```default
N E X T F L O W  ~  version 23.04.1
Launching `rnaseq.nf` [distraught_goldwasser] DSL2 - revision: bdebf34e16
executor >  local (1)
[37/7ef8f0] process > INDEX [100%] 1 of 1 ✔
```

The newly created `nextflow.config` file does not need to be specified in the `nextflow run` command. This file is automatically searched for and used by Nextflow. 

### **4.1.3. Collect Read Files By Pairs**

Previously, we have defined the `reads` parameter to be the following:
```default
params.reads = "/.../<TODO_nxfdata>/*_{1,2}.fq"
```

**Exercise:** Convert the `reads` parameter into a tuple channel called `reads_ch`, where the first element is a unique grouping key, and the second element is the paired `.fq` files. Then, view the contents of `reads_ch`

::: {.callout-important}
**TO DO**
Change CONTAINER 
:::

::: {.callout-note appearance="simple" collapse="true"}
### Solution

```default
reads_ch = Channel.fromFilePairs("$params.reads")
reads_ch.view()
```

The `fromFilePairs` channel factory will automatically group input files into a tuple with a unique grouping key. The `view()` channel operator can be used to view the contents of the channel.

```default
nextflow run rnaseq.nf
```
```default
[gut, [/.../<PATH TO DATA>/gut_1.fq, /.../<PATH TO DATA>/gut_2.fq]]
[liver, [/.../<PATH TO DATA>/liver_1.fq, /.../<PATH TO DATA>/liver_2.fq]]
[lung, [/.../<PATH TO DATA>/lung_1.fq, /.../<PATH TO DATA>/lung_2.fq]]
```

:::


### **4.1.4. Perform Expression Quantification**

Let's add a new process `QUANTIFICATION` that uses both the indexed transcriptome file and the `.fq` file pairs to execute the `salmon quant` command. 

```default
process QUANTIFICATION {
    input:
    path salmon_index
    tuple val(sample_id), path(reads)

    output:
    path "$sample_id"

    script:
    """
    salmon quant --libType=U \
    -i $salmon_index -1 ${reads[0]} -2 ${reads[1]} -o $sample_id
    """
}
```
The `QUANTIFICATION` process takes two inputs, the first is the path to the `salmon_index` created from the `INDEX` process. The second input is set to match the output of `fromFilePairs` -- a tuple where the first element is a value (ie. grouping key), and the second element is a list of paths to the `.fq` reads. 

In the script block, the `salmon quant` command saves the output of the tool as `$sample_id`. This output is emitted by the `QUANTIFICATION` process, using `$` to access the Nextflow variable. 

**Exercise**: 

Set the following as the execution container for `QUANTIFICATION`: 

::: {.callout-important}
**TO DO**
Change CACHE DIR 
:::

```default
<CACHE DIR>/depot.galaxyproject.org-singularity-salmon-1.10.1--h7e5ed60_0.img
```
Assign `index_ch` and `reads_ch` as the inputs to this process, and emit the process outputs as `quant_ch`. Then,iew the contents of `quant_ch`

::: {.callout-note appearance="simple" collapse="true"}
### Solution

To assign a container to a process, the `container` directive can be used. 

```default
process QUANTIFICATION {
    container "<CACHE DIRECTORY>/depot.galaxyproject.org-singularity-salmon-1.10.1--h7e5ed60_0.img"

    input:
    path salmon_index
    tuple val(sample_id), path(reads)

    output:
    path "$sample_id"

    script:
    """
    salmon quant --libType=U \
    -i $salmon_index -1 ${reads[0]} -2 ${reads[1]} -o $sample_id
    """
}
```

To run the `QUANTIFICATION` process and emit the outputs as `quant_ch`, the following can be added to the end of the `workflow` block:

```default
quant_ch = QUANTIFICATION(index_ch, reads_ch)
quant_ch.view()
```

The script can now be run:

```default
nextflow run rnaseq.nf 
```

```default
N E X T F L O W  ~  version 23.04.1
Launching `rnaseq.nf` [elated_cray] DSL2 - revision: abe41f4f69
executor >  local (4)
[e5/e75095] process > INDEX              [100%] 1 of 1 ✔
[4c/68a000] process > QUANTIFICATION (1) [100%] 3 of 3 ✔
/.../work/b1/d861d26d4d36864a17d2cec8d67c80/liver
/.../work/b4/a6545471c1f949b2723d43a9cce05f/lung
/.../work/4c/68a000f7c6503e8ae1fe4d0d3c93d8/gut
```

In the Nextflow output, we can see that the `QUANTIFICATION` process has been ran three times, since the `reads_ch` consists of three elements. Nextflow will automatically run the `QUANTIFICATION` process on each of the elements in the input channel, creating separate process execution work directories for each execution. 
:::


### **4.1.5. Quality Control**

Now, let's implement a `FASTQC` quality control process for the input fastq reads. 

**Exercise:** 

Create a process called `FASTQC` that takes `reads_ch` as an input, and declares the process input to be a tuple matching the structure of `reads_ch`, where the first element is assigned the variable `sample_id`, and the second variable is assigned the variable `reads`. This `FASTQC` process will first create an output directory `fastqc_${sample_id}_logs`, then perform `fastqc` on the input `reads` and save the results in the newly created directory `fastqc_${sample_id}_logs`:
```default
mkdir fastqc_${sample_id}_logs
fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}
```
Take `fastqc_${sample_id}_logs` as the output of the process, and assign it to the channel `fastqc_ch`. Finally, specify the process container to be the following:

::: {.callout-important}
**TO DO**
Change CACHE DIR 
:::

```default
<CACHE DIR >/depot.galaxyproject.org-singularity-fastqc-0.12.1--hdfd78af_0.img
```
::: {.callout-note appearance="simple" collapse="true"}
### Hint

This will be the structure of the `FASTQC` process:

```default
process FASTQC {
    container ...

    input:
    tuple ...

    output:
    path ...

    script:
    """
    mkdir fastqc_${sample_id}_logs
    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}
    """
}
```

Change the `container` to be the path to the container in our cache directory.

From the `script` block, we can see that the outputs of the process will be `fastqc_${sample_id}_logs`. Add this to the `output` section.

From the `script` block, we can see that the inputs required are `sample_id` and `reads`. Add this into your `input` tuple, ensuring the tuple structure matches the structure of `reads_ch`. Don't forget to add either `val` or `path` qualifiers within the tuple!

:::

::: {.callout-note appearance="simple" collapse="true"}
### Solution

The process `FASTQC` is created in `rnaseq.nf`. Since the input channel is a tuple, the process input declaration is a tuple containing elements that match the structure of the incoming channel. The first element of the tuple is assigned the variable `sample_id`, and the second element of the tuple is assigned the variable `reads`. The relevant container is specified using the `container` process directive.

```default
process FASTQC {
    container "<CACHE DIR>/depot.galaxyproject.org-singularity-fastqc-0.12.1--hdfd78af_0.img"

    input:
    tuple val(sample_id), path(reads)

    output:
    path "fastqc_${sample_id}_logs"

    script:
    """
    mkdir fastqc_${sample_id}_logs
    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads}
    """
}
```

In the workflow scope, the following can be added:

```default
fastqc_ch = FASTQC(reads_ch)
```
The `FASTQC` process is called, taking `reads_ch` as an input. The output of the process is assigned to be `fastqc_ch`.

```default
nextflow run rnaseq.nf
```

```default
N E X T F L O W  ~  version 23.04.1
Launching `rnaseq.nf` [sad_jennings] DSL2 - revision: cfae7ccc0e
executor >  local (7)
[b5/6bece3] process > INDEX              [100%] 1 of 1 ✔
[32/46f20b] process > QUANTIFICATION (3) [100%] 3 of 3 ✔
[44/27aa8d] process > FASTQC (2)         [100%] 3 of 3 ✔
```

In the Nextflow output, we can see that the `FASTQC` has been ran three times as expected, since the `reads_ch` consists of three elements. 
:::


### **4.1.6. MultiQC Report**

So far, the generated outputs have all been saved inside the Nextflow work directory. For the `FASTQC` process, the specified output directory is only created inside the process execution directory. To save results to a custom folder, the `publishDir` process directive can be used. 

Let's create a new `MULTIQC` process in our workflow that takes the outputs from the `QUANTIFICATION` and `FASTQC` processes, to create a final report using the `multiqc` tool. We will then publish these process outputs to a directory outside of the process execution directory. 

```default
process MULTIQC {
    publishDir params.outdir, mode:'copy'
    container "<TODO_cachedir>/depot.galaxyproject.org-singularity-multiqc-1.21--pyhdfd78af_0.img"

    input:
    path quantification
    path fastqc

    output:
    path "*.html"

    script:
    """
    multiqc . --filename $quantification
    """
}
```
In the `MULTIQC` process, the `multiqc` command is performed on both `quantification` and `fastqc` inputs. Note that in `multiqc`, the specific inputs don't need to be provided to the command.

We then publish the output report to a directory defined by the `outdir` parameter. Only files that match the declaration in the output block are published, not all the outputs of a process (ie. only files with `.html` file extensions will be copied to the output directory). By default, files are published to the output folder through a symbolic link to the file produced in the process `work` directory. This behavior can be modified using the `mode` option, eg. `copy`, which copies the file from the process execution directory to the specified output directory. 

Now, add the following to the end of workflow scope:
```default
multiqc_ch = MULTIQC(quant_ch, fastqc_ch)
```

Run the pipeline, specifying an output directory using the `outdir` parameter:

```default
nextflow run rnaseq.nf --outdir "results"
```
A `results` directory containing the `multiqc` reports now will be created. 

```default
ls results
```

```default
gut.html  liver.html  lung.html
```

::: {.callout-tip}
### **Key points**

- Environments can be defined using the `container` process directive
- The input declaration for a process must match the structure of the channel that is being passed into that process
:::


---
^*This workshop is adapted from [Fundamentals Training](https://training.nextflow.io/basic_training/), [Advanced Training](https://training.nextflow.io/advanced/), [Developer Tutorials](https://nf-co.re/docs/contributing/tutorials/creating_with_nf_core#creating-a-pipeline), and [Nextflow Patterns](https://nextflow-io.github.io/patterns/) materials from Nextflow and nf-core*^

<span style="font-size:0.5em;">^*[Draft for Future Sessions](./4.1_draft_future_sess.html)</span>
